---

// utils
import { getLocaleFromUrl } from "@js/localeUtils";

// data
import { type navLinkItem } from "@config/types/configDataTypes";

/**
 * Compares two paths ensuring they both have trailing slashes for consistency
 * @param path1 First path to compare
 * @param path2 Second path to compare
 * @returns boolean indicating if the paths are equal
 */
const comparePathsWithTrailingSlash = (path1: string, path2: string): boolean => {
	const ensureTrailingSlash = (path: string): string => (path.endsWith("/") ? path : `${path}/`);

	return ensureTrailingSlash(path1) === ensureTrailingSlash(path2);
};

interface Props {
	navItem: navLinkItem;
	class?: string;
}

const { navItem, class: className } = Astro.props as Props;
const { text, link, newTab = false } = navItem;

const currLocale = getLocaleFromUrl(Astro.url);

const domain = import.meta.env.SITE; // pulls from astro.config.mjs
let actualLink: string;
if (!link.includes(domain) && !link.startsWith("/") && !link.startsWith("#")) {
	// it is an external link
	actualLink = link;
} else {
	// internal link, so we need to add the locale to the link
	actualLink = link;
}
// remove trailing slash so IDs will work
if (actualLink.endsWith("/") && actualLink !== "/") {
	actualLink = actualLink.slice(0, -1);
}
---

<li>
	<a
		class:list={[
			"nav__link--base primary-focus relative block w-full px-4 py-2",
			className,
			{
				// styling for current active page link
				"text-base-600": comparePathsWithTrailingSlash(Astro.url.pathname, actualLink),
			},
		]}
		href={actualLink}
		target={newTab ? "_blank" : ""}
		rel={newTab ? "noopener noreferrer" : ""}
		aria-label={text}
	>
		{text}
	</a>
</li>